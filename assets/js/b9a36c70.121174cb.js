"use strict";(self.webpackChunkdevelopers_doc=self.webpackChunkdevelopers_doc||[]).push([[596],{2774:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(3117),i=n(102),o=(n(7294),n(3905)),r=["components"],s={sidebar_label:"JWT",sidebar_position:2},l="JSON Web Token (JWT)",p={unversionedId:"api/authentication/jwt",id:"api/authentication/jwt",isDocsHomePage:!1,title:"JSON Web Token (JWT)",description:"Example of a JWT Access Token",source:"@site/docs/api/authentication/jwt.md",sourceDirName:"api/authentication",slug:"/api/authentication/jwt",permalink:"/docs/api/authentication/jwt",editUrl:"https://github.com/selfcommunity/developers-doc/tree/main/docs/api/authentication/jwt.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"JWT",sidebar_position:2},sidebar:"apiSidebar",previous:{title:"Introduction",permalink:"/docs/api/authentication/intro"},next:{title:"OAuth 2.0",permalink:"/docs/api/authentication/oauth"}},u=[{value:"Generating JWTs",id:"generating-jwts",children:[],level:2},{value:"Verify JWTs",id:"verify-jwts",children:[],level:2}],h={toc:u};function c(e){var t=e.components,s=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"json-web-token-jwt"},"JSON Web Token (JWT)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Example of a JWT Access Token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\neyJleHAiOjE2MDI0OTYwMjksInVzZXJfaWQiOjcsImlhdCI6MTYwMjQ5NDIyOX0.\nv9H5nkbu_J0ysGqY2YUeufn1ypHmvvTc2k2WoDdztvw\n")),(0,o.kt)("p",null,"JSON Web Token (JWT) is an open standard ",(0,o.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"RFC 7519")," that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed."),(0,o.kt)("p",null,"JWTs will be signed using a shared secret (with the HMAC algorithm).\nIf your product support JWT access token, go to Community APIs panel under Integration menu on ",(0,o.kt)("a",{parentName:"p",href:"https://make.selfcommunity.com"},"https://make.selfcommunity.com"),".\nYou need to first check that you have ",(0,o.kt)("strong",{parentName:"p"},"enabled")," the ",(0,o.kt)("strong",{parentName:"p"},"Community APIs")," and ",(0,o.kt)("strong",{parentName:"p"},"Authentication APIs")," and ",(0,o.kt)("strong",{parentName:"p"},"retrieve the secret key")," in the JWT Authentication panel."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"JWT Panel",src:n(5396).Z})),(0,o.kt)("p",null,"If you want to learn more about JWTs, we recommend the full documentation at ",(0,o.kt)("a",{parentName:"p",href:"https://jwt.io/"},"jwt.io"),"."),(0,o.kt)("p",null,"JSON Web Tokens are strings of text which are passed on every request (Header Authorization) to access protected resources of the server.\nThey contain a combination of secrets from the API and payload data in the form of a JSON object."),(0,o.kt)("h2",{id:"generating-jwts"},"Generating JWTs"),(0,o.kt)("p",null,"A single JWT consists of three components: Header, Payload, and Signature with a ",(0,o.kt)("inlineCode",{parentName:"p"},".")," separating each."),(0,o.kt)("p",null,"For example, a JWT typically looks like the following:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"aaaaa.bbbbb.ccccc")),(0,o.kt)("p",null,"The SelfCommunity API recommends and supports libraries provided on ",(0,o.kt)("a",{parentName:"p",href:"https://jwt.io/"},"jwt.io"),".\nWhile other libraries can create JWT, these recommended libraries are the most robust."),(0,o.kt)("p",null,"Below we see how to generate the three components of a jwt."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Header")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Header of a JWT Token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "alg": "HS256",\n  "typ": "JWT"\n}\n')),(0,o.kt)("p",null,"The Header includes the specification of the signing algorithm and type of token."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"alg")," notes the algorithm being used. SelfCommunity APIs use HMAC SHA256 (HS256). ",(0,o.kt)("em",{parentName:"li"},"Required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"typ")," refers to the token type: JWT. ",(0,o.kt)("em",{parentName:"li"},"Required."))),(0,o.kt)("p",null,"Then, this JSON is Base64Url encoded to form the first part of the JWT."),(0,o.kt)("aside",{class:"notice"},"Note: The SelfCommunity API uses HS256 to sign the token. Use of other algorithms is not supported."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Payload")),(0,o.kt)("p",null,"The payload of a token contains the claims or the pieces of information being passed about the user and any metadata required.\nWhile there are three types of claims, registered, public, and private, we highly recommend using registered claims for interoperability."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Payload of a JWT Token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "user_id": 1,\n  "token_type": "access",\n  "jti": "random unique identifier of the token",\n  "iat": 1496091964000,\n  "exp": 1496091964200\n}\n')),(0,o.kt)("p",null,"A payload ",(0,o.kt)("strong",{parentName:"p"},"require")," an user id (",(0,o.kt)("em",{parentName:"p"},"user_id"),"), an expiration time (",(0,o.kt)("em",{parentName:"p"},"exp"),"), an issued at a time (",(0,o.kt)("em",{parentName:"p"},"iat"),") and a JWT ID (",(0,o.kt)("em",{parentName:"p"},"jti"),").\nThe ",(0,o.kt)("em",{parentName:"p"},"ext_id")," is not necessary in order to authenticate the user.\nIt is included if the token is generated by the community itself.\nIt will not be verified in the authorization phase."),(0,o.kt)("p",null,"In particular:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"user_id")," notes the user unique id (in the community) identified by the token. Its value MUST be an integer number. ",(0,o.kt)("em",{parentName:"li"},"Required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"ext_id")," notes the user unique id (in the external service). ",(0,o.kt)("em",{parentName:"li"},"Optional.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"token_type"),' notes the type of the token. Its value MUST be "access". ',(0,o.kt)("em",{parentName:"li"},"Required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"exp"),' (expiration time) notes the the expiration time on or after which the JWT MUST NOT be accepted for processing. Its value MUST be a number containing a NumericDate value in seconds since Epoch (unix epoch time). The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim.  ',(0,o.kt)("em",{parentName:"li"},"Required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"iat")," (issued at) notes the time at which the JWT was issued. This claim can be used to determine the age of the JWT. Its value MUST be a number containing a NumericDate value in seconds since Epoch (unix epoch time). ",(0,o.kt)("em",{parentName:"li"},"Required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"jti"),' (JWT Id) notes a unique key identifier for the JWT. It is a (semi-)random string and the value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object. The "jti" claim can be used to prevent the JWT from being replayed (allows a token to be used only once). The "jti" value is a case-sensitive string. ',(0,o.kt)("em",{parentName:"li"},"Required."))),(0,o.kt)("p",null,"It is ",(0,o.kt)("strong",{parentName:"p"},"highly recommended to set the exp timestamp for a short period"),", i.e. a few minutes, a few hours.\nThis way, if a token is intercepted or shared, the token will only be valid for a short period of time."),(0,o.kt)("aside",{class:"notice"},"The expiration time (exp), the issued at time (iat) must be defined in as number containing a NumericDate value in seconds since Epoch (unix epoch time)."),(0,o.kt)("aside",{class:"notice"},"Note: Though protected against tampering, the information contained in the Header and Payload is readable by anyone. For this reason no confidential information in either of these elements will be stored."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Signature")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Signature of a JWT Token")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'HMACSHA256(\n    base64UrlEncode(header) + "." +\n    base64UrlEncode(payload),\n    SECRET_KEY)\n')),(0,o.kt)("p",null,"The Signature of the token base64 encodes the header and payload, then includes the API Secret within the HMACSHA256\nalgorithm to securely sign the entire package."),(0,o.kt)("p",null,"The signature is used to verify the message wasn't changed along the way and it can also verify that the sender of the JWT is who it says it is."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Putting all together")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// Example of how to create a JWT token using jsonwebtoken library.\n// If jsonwebtoken is not installed, instal with: npm install --save jsonwebtoken\n// To generate the token, use this code:\n\nvar jwt = require("jsonwebtoken");\nvar SECRET_KEY = "f848a99779fe4b7bd2df67adcffde35ab6f4741eba8e3123"; // Your SECRET_KEY\n\nfunction createToken(user) {\n  var userData = {\n    "user_id": 1, // or an other regisered user_id\n    "token_type": "access",\n    "jti": new Date().getTime() // or use another method\n  };\n  return jwt.sign(userData, SECRET_KEY, {\n    algorithm: "HS256",\n    expiresIn: "1h", // or choose another expiration time\n    header: { typ: "JWT" }\n  });\n}\n')),(0,o.kt)("p",null,"The output is three Base64-URL strings separated by dots that can be easily passed in the Authorization header."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<header>.<payload>.<signature>\n")),(0,o.kt)("p",null,"Take a look at the example in the javascript code tab."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Code samples")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'To authorize, use this code:\n\n# With shell, you can just pass the correct header with each request\ncurl "api_endpoint_here"\n  -H "Authorization: Bearer <token>"\n\nMake sure to replace <token> with your JWT access token.\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// To authorize the request, use this code:\n\nconst headers = {\n  'Accept':'application/json',\n  'Authorization': 'Bearer '.concat(token)\n};\n\nfetch('<api_endpoint_here>',\n{\n  method: 'GET',\n  headers: headers\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,o.kt)("p",null,"Whenever the user wants to access a protected route or resource, the user agent should send the JWT,\ntypically in the Authorization header using the Bearer schema."),(0,o.kt)("p",null,"The content of the header should look like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Authorization: Bearer <token>\n")),(0,o.kt)("p",null,"This can be, in certain cases, a stateless authorization mechanism.\nThe server's protected routes will check for a valid JWT in the Authorization header, and if it's present, the user\nwill be allowed to access protected resources.\nIf the JWT contains the necessary data, the need to query the database for certain operations may be reduced,\nthough this may not always be the case."),(0,o.kt)("h2",{id:"verify-jwts"},"Verify JWTs"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Code samples")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"# You can also use wget\ncurl -X POST /api/v2/jwt/verify_token/ \\\n  -H 'Accept: application/json'\n  -H 'Content-Type: application/json; charset=utf-8'\n  --DATA '{\"token\": \"<token>\"}'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst headers = {\n  'Accept':'application/json'\n};\n\nconst inputBody = {\n    'token': '<token>'\n};\n\nfetch('/api/v2/jwt/verify_token/',\n{\n  method: 'GET',\n  headers: headers,\n  body: inputBody\n})\n.then(function(res) {\n    return res.json();\n}).then(function(body) {\n    console.log(body);\n});\n\n")),(0,o.kt)("p",null,"This Endpoint test the validity of the token. It verifies the JWS (Signature) of the token."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," It does not verify the user_id, ext_id and the token_type of the payload."),(0,o.kt)("h4",{id:"http-request"},"HTTP Request"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GET /api/v2/jwt/verify_token/")),(0,o.kt)("h4",{id:"VerifyJwt-responses"},"Responses"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Status"),(0,o.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Schema"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"200"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"OK")),(0,o.kt)("td",{parentName:"tr",align:null},"Token is valid"),(0,o.kt)("td",{parentName:"tr",align:null},"none")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"401"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc7231#section-6.3.1"},"Unauthorized")),(0,o.kt)("td",{parentName:"tr",align:null},"Token is not valid"),(0,o.kt)("td",{parentName:"tr",align:null},"none")))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This operation does not require authentication"))))}c.isMDXComponent=!0},5396:function(e,t,n){t.Z=n.p+"assets/images/jwt_panel-df600747614c228e266f3950d6a7c942.png"}}]);