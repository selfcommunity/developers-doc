"use strict";(self.webpackChunkdevelopers_doc=self.webpackChunkdevelopers_doc||[]).push([[6289],{16649:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedUpdateParams","title":"EmbedUpdateParams","description":"EmbedUpdateParams interface","source":"@site/docs/sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedUpdateParams.md","sourceDirName":"sdk/community-js/api-services/API_Reference/types/embed/interfaces","slug":"/sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedUpdateParams","permalink":"/docs/sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedUpdateParams","draft":false,"unlisted":false,"editUrl":"https://github.com/selfcommunity/developers-doc/tree/main/docs/sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedUpdateParams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sdkSidebar","previous":{"title":"EmbedSearchParams","permalink":"/docs/sdk/community-js/api-services/API_Reference/types/embed/interfaces/EmbedSearchParams"},"next":{"title":"types/event","permalink":"/docs/sdk/community-js/api-services/API_Reference/types/event/"}}');var d=s(74848),n=s(28453);const a={},c="EmbedUpdateParams",i={},o=[{value:"Properties",id:"properties",level:2}];function m(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.header,{children:(0,d.jsx)(t.h1,{id:"embedupdateparams",children:"EmbedUpdateParams"})}),"\n",(0,d.jsx)(t.p,{children:"EmbedUpdateParams interface"}),"\n",(0,d.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Property"}),(0,d.jsx)(t.th,{children:"Type"}),(0,d.jsx)(t.th,{children:"Description"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsxs)(t.td,{children:[(0,d.jsx)("a",{id:"metadata"})," ",(0,d.jsx)(t.code,{children:"metadata"})]}),(0,d.jsxs)(t.td,{children:[(0,d.jsx)(t.code,{children:"Record"}),"<",(0,d.jsx)(t.code,{children:"string"}),", ",(0,d.jsx)(t.code,{children:"any"}),">"]}),(0,d.jsx)(t.td,{children:"Metadata associated to this embed. It mus be a valid json object. For embed_type sc_link it contains metadata associated with the external resource. For embed_type sc_shared_object it contains a field type that is the type of the object (Discussion or Post) and a field id that contains the id of the object shared"})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsxs)(t.td,{children:[(0,d.jsx)("a",{id:"url"})," ",(0,d.jsx)(t.code,{children:"url?"})]}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"string"})}),(0,d.jsx)(t.td,{children:"Url for the resource, if any"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(m,{...e})}):m(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var r=s(96540);const d={},n=r.createContext(d);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);