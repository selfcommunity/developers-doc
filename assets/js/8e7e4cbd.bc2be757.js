"use strict";(self.webpackChunkdevelopers_doc=self.webpackChunkdevelopers_doc||[]).push([[97293],{92991:function(e,n,t){t.d(n,{Z:function(){return p}});var o=t(67294),r=t(27331),s=t(5730);function a(e,n){void 0===e&&(e=""),void 0===n&&(n={});var t=Object.keys(n).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(n[e])})).join("&");return fetch(e,{method:"POST",headers:{accept:"application/json","content-type":"application/x-www-form-urlencoded"},body:t})}function i(){if((0,s.Z)()){var e={refresh_token:JSON.parse(window.localStorage.getItem("token")).refresh_token,client_id:r.r.user.client_id,grant_type:"refresh_token"};return a(r.r.portal+"/oauth/token/",e).then((function(e){return e.json()})).then((function(e){return{accessToken:e.access_token,refreshToken:e.refresh_token,tokenType:e.token_type,expiresIn:e.expires_in}})).catch((function(e){return Promise.reject(e)}))}}var c=function(){if((0,s.Z)())return JSON.parse(window.localStorage.getItem("token"))};function u(){var e=(0,s.Z)(),n=(0,o.useState)(c),t=n[0],i=n[1];return(0,o.useEffect)((function(){e&&(!t||1e3*t.expiresIn<Date.now()?a(r.r.portal+"/oauth/token/",r.r.user).then((function(e){return e.json()})).then((function(e){return{accessToken:e.access_token,refreshToken:e.refresh_token,tokenType:e.token_type,expiresIn:e.expires_in}})).catch((function(e){return e})).then((function(e){i(e)})):i(c))}),[e]),(0,o.useEffect)((function(){e&&window.localStorage.setItem("token",JSON.stringify(t))}),[e,t]),t}var m=t(49382),d=t(19666);function p(e){var n=e.children,t=u(),s={portal:r.r.portal,locale:{default:"en"},session:{type:"OAuth",clientId:r.r.user.client_id,authToken:t,handleRefreshToken:i},theme:{palette:{primary:{main:"#7baa5d"},secondary:{main:"#4a8f62"}},components:{MuiIcon:{defaultProps:{baseClassName:"material-icons-outlined"}}}},handleAnonymousAction:function(){alert("Anonymous action")}};return o.createElement(d.Z,null,(function(){return o.createElement(m.SCContextProvider,{conf:s},n)}))}},27331:function(e,n,t){t.d(n,{r:function(){return o}});var o={user:{username:"beatrice",password:"Password!!Beatrice2021",client_id:"8HXeelXaQldhQmiSJDMhqNboELvDH402WIQIORFF",grant_type:"password"},portal:"https://www.fashionista.community"}},20373:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return k}});var o=t(83117),r=t(80102),s=t(67294),a=t(3905),i=t(19666);function c(){return s.createElement(i.Z,null,(function(){var e=t(49558).Message;return s.createElement(e,null)}))}var u=t(92991),m=["components"],d={sidebar_label:"Message",sidebar_position:1,title:"Message"},p=void 0,l={unversionedId:"sdk/community-js/react-ui/Components/Message",id:"sdk/community-js/react-ui/Components/Message",title:"Message",description:"The Message component renders a message item.",source:"@site/docs/sdk/community-js/react-ui/Components/Message.mdx",sourceDirName:"sdk/community-js/react-ui/Components",slug:"/sdk/community-js/react-ui/Components/Message",permalink:"/docs/sdk/community-js/react-ui/Components/Message",editUrl:"https://github.com/selfcommunity/developers-doc/tree/main/docs/sdk/community-js/react-ui/Components/Message.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Message",sidebar_position:1,title:"Message"},sidebar:"sdkSidebar",previous:{title:"Loyalty Program",permalink:"/docs/sdk/community-js/react-ui/Components/LoyaltyProgram"},next:{title:"Message Editor",permalink:"/docs/sdk/community-js/react-ui/Components/MessageEditor"}},f={},k=[{value:"Usage",id:"usage",level:4}],h={toc:k};function g(e){var n=e.components,t=(0,r.Z)(e,m);return(0,a.kt)("wrapper",(0,o.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The Message component renders a message item.",(0,a.kt)("br",null),'\nIt can be rendered in different ways depending on its type that can be "snippet", "text", "document", "image" or "video".',(0,a.kt)("br",null),"\nSnippet messages contains the user avatar and username, the message content and the receipt date. The remaining message types ",(0,a.kt)("br",null),"\nare self-explanatory and contain the body of the message related to their type.")),(0,a.kt)(u.Z,{mdxType:"Logged"},(0,a.kt)(c,{mdxType:"Message"})),(0,a.kt)("h4",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"}," import React from 'react';\n import {SCContextProvider} from '@selfcommunity/react-core';\n import {Message} from '@selfcommunity/react-ui';\n\n function App() {\n   const conf = {\n     portal: '<community-path>',\n     session: {\n       type: 'OAuth',\n       token: '<community-token>',\n       refreshToken: '<community-refresh-token>',\n       refreshTokenEndpoint: '<community-refresh-endpoint>',\n     },\n   };\n   return (\n     <SCContextProvider conf={conf}><Message /></SCContextProvider>\n   );\n }\n")))}g.isMDXComponent=!0}}]);